# coding: utf-8

"""
    Sensor Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StreamPost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'resulttype': 'str',
        'organisationid': 'str',
        'groupids': 'list[str]',
        'locationid': 'str',
        'procedureid': 'str',
        'sample_period': 'str',
        'reporting_period': 'str',
        'stream_metadata': 'StreamMetadata'
    }

    attribute_map = {
        'id': 'id',
        'resulttype': 'resulttype',
        'organisationid': 'organisationid',
        'groupids': 'groupids',
        'locationid': 'locationid',
        'procedureid': 'procedureid',
        'sample_period': 'samplePeriod',
        'reporting_period': 'reportingPeriod',
        'stream_metadata': 'streamMetadata'
    }

    def __init__(self, id=None, resulttype=None, organisationid=None, groupids=None, locationid=None, procedureid=None, sample_period=None, reporting_period=None, stream_metadata=None):
        """
        StreamPost - a model defined in Swagger
        """

        self._id = None
        self._resulttype = None
        self._organisationid = None
        self._groupids = None
        self._locationid = None
        self._procedureid = None
        self._sample_period = None
        self._reporting_period = None
        self._stream_metadata = None

        self.id = id
        self.resulttype = resulttype
        self.organisationid = organisationid
        if groupids is not None:
          self.groupids = groupids
        if locationid is not None:
          self.locationid = locationid
        if procedureid is not None:
          self.procedureid = procedureid
        self.sample_period = sample_period
        self.reporting_period = reporting_period
        if stream_metadata is not None:
          self.stream_metadata = stream_metadata

    @property
    def id(self):
        """
        Gets the id of this StreamPost.

        :return: The id of this StreamPost.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this StreamPost.

        :param id: The id of this StreamPost.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def resulttype(self):
        """
        Gets the resulttype of this StreamPost.

        :return: The resulttype of this StreamPost.
        :rtype: str
        """
        return self._resulttype

    @resulttype.setter
    def resulttype(self, resulttype):
        """
        Sets the resulttype of this StreamPost.

        :param resulttype: The resulttype of this StreamPost.
        :type: str
        """
        if resulttype is None:
            raise ValueError("Invalid value for `resulttype`, must not be `None`")
        allowed_values = ["scalarvalue", "geolocationvalue"]
        if resulttype not in allowed_values:
            raise ValueError(
                "Invalid value for `resulttype` ({0}), must be one of {1}"
                .format(resulttype, allowed_values)
            )

        self._resulttype = resulttype

    @property
    def organisationid(self):
        """
        Gets the organisationid of this StreamPost.

        :return: The organisationid of this StreamPost.
        :rtype: str
        """
        return self._organisationid

    @organisationid.setter
    def organisationid(self, organisationid):
        """
        Sets the organisationid of this StreamPost.

        :param organisationid: The organisationid of this StreamPost.
        :type: str
        """
        if organisationid is None:
            raise ValueError("Invalid value for `organisationid`, must not be `None`")

        self._organisationid = organisationid

    @property
    def groupids(self):
        """
        Gets the groupids of this StreamPost.
        A list of group identifiers for which this stream will be a member.

        :return: The groupids of this StreamPost.
        :rtype: list[str]
        """
        return self._groupids

    @groupids.setter
    def groupids(self, groupids):
        """
        Sets the groupids of this StreamPost.
        A list of group identifiers for which this stream will be a member.

        :param groupids: The groupids of this StreamPost.
        :type: list[str]
        """

        self._groupids = groupids

    @property
    def locationid(self):
        """
        Gets the locationid of this StreamPost.

        :return: The locationid of this StreamPost.
        :rtype: str
        """
        return self._locationid

    @locationid.setter
    def locationid(self, locationid):
        """
        Sets the locationid of this StreamPost.

        :param locationid: The locationid of this StreamPost.
        :type: str
        """

        self._locationid = locationid

    @property
    def procedureid(self):
        """
        Gets the procedureid of this StreamPost.

        :return: The procedureid of this StreamPost.
        :rtype: str
        """
        return self._procedureid

    @procedureid.setter
    def procedureid(self, procedureid):
        """
        Sets the procedureid of this StreamPost.

        :param procedureid: The procedureid of this StreamPost.
        :type: str
        """

        self._procedureid = procedureid

    @property
    def sample_period(self):
        """
        Gets the sample_period of this StreamPost.
        Expected sample period in ISO8601 duration format.

        :return: The sample_period of this StreamPost.
        :rtype: str
        """
        return self._sample_period

    @sample_period.setter
    def sample_period(self, sample_period):
        """
        Sets the sample_period of this StreamPost.
        Expected sample period in ISO8601 duration format.

        :param sample_period: The sample_period of this StreamPost.
        :type: str
        """
        if sample_period is None:
            raise ValueError("Invalid value for `sample_period`, must not be `None`")

        self._sample_period = sample_period

    @property
    def reporting_period(self):
        """
        Gets the reporting_period of this StreamPost.
        Expected reporting period (time between updates for new samples) in ISO8601 duration format.

        :return: The reporting_period of this StreamPost.
        :rtype: str
        """
        return self._reporting_period

    @reporting_period.setter
    def reporting_period(self, reporting_period):
        """
        Sets the reporting_period of this StreamPost.
        Expected reporting period (time between updates for new samples) in ISO8601 duration format.

        :param reporting_period: The reporting_period of this StreamPost.
        :type: str
        """
        if reporting_period is None:
            raise ValueError("Invalid value for `reporting_period`, must not be `None`")

        self._reporting_period = reporting_period

    @property
    def stream_metadata(self):
        """
        Gets the stream_metadata of this StreamPost.

        :return: The stream_metadata of this StreamPost.
        :rtype: StreamMetadata
        """
        return self._stream_metadata

    @stream_metadata.setter
    def stream_metadata(self, stream_metadata):
        """
        Sets the stream_metadata of this StreamPost.

        :param stream_metadata: The stream_metadata of this StreamPost.
        :type: StreamMetadata
        """

        self._stream_metadata = stream_metadata

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StreamPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
