# coding: utf-8

"""
    Sensor Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RolePost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'organisationid': 'str',
        'permissions': 'list[RolePostPermissions]',
        'groupid': 'str',
        'implied': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'organisationid': 'organisationid',
        'permissions': 'permissions',
        'groupid': 'groupid',
        'implied': 'implied'
    }

    def __init__(self, id=None, type=None, organisationid=None, permissions=None, groupid=None, implied=None):
        """
        RolePost - a model defined in Swagger
        """

        self._id = None
        self._type = None
        self._organisationid = None
        self._permissions = None
        self._groupid = None
        self._implied = None

        self.id = id
        self.type = type
        self.organisationid = organisationid
        self.permissions = permissions
        if groupid is not None:
          self.groupid = groupid
        if implied is not None:
          self.implied = implied

    @property
    def id(self):
        """
        Gets the id of this RolePost.
        A string identifier for the role. If the identifier already exists then this will be treated as an update operation.  

        :return: The id of this RolePost.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RolePost.
        A string identifier for the role. If the identifier already exists then this will be treated as an update operation.  

        :param id: The id of this RolePost.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this RolePost.
        This can be either \".OrganisationRole\", \".AdministrationRole\" or \".GroupRole\"

        :return: The type of this RolePost.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RolePost.
        This can be either \".OrganisationRole\", \".AdministrationRole\" or \".GroupRole\"

        :param type: The type of this RolePost.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def organisationid(self):
        """
        Gets the organisationid of this RolePost.

        :return: The organisationid of this RolePost.
        :rtype: str
        """
        return self._organisationid

    @organisationid.setter
    def organisationid(self, organisationid):
        """
        Sets the organisationid of this RolePost.

        :param organisationid: The organisationid of this RolePost.
        :type: str
        """
        if organisationid is None:
            raise ValueError("Invalid value for `organisationid`, must not be `None`")

        self._organisationid = organisationid

    @property
    def permissions(self):
        """
        Gets the permissions of this RolePost.
        A list of permissions.

        :return: The permissions of this RolePost.
        :rtype: list[RolePostPermissions]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """
        Sets the permissions of this RolePost.
        A list of permissions.

        :param permissions: The permissions of this RolePost.
        :type: list[RolePostPermissions]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def groupid(self):
        """
        Gets the groupid of this RolePost.

        :return: The groupid of this RolePost.
        :rtype: str
        """
        return self._groupid

    @groupid.setter
    def groupid(self, groupid):
        """
        Sets the groupid of this RolePost.

        :param groupid: The groupid of this RolePost.
        :type: str
        """

        self._groupid = groupid

    @property
    def implied(self):
        """
        Gets the implied of this RolePost.

        :return: The implied of this RolePost.
        :rtype: bool
        """
        return self._implied

    @implied.setter
    def implied(self, implied):
        """
        Sets the implied of this RolePost.

        :param implied: The implied of this RolePost.
        :type: bool
        """

        self._implied = implied

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RolePost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
