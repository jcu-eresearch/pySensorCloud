# coding: utf-8

"""
    Sensor Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InvitationEmbedded(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organisation': 'Organisation',
        'roles': 'list[Role]'
    }

    attribute_map = {
        'organisation': 'organisation',
        'roles': 'roles'
    }

    def __init__(self, organisation=None, roles=None):
        """
        InvitationEmbedded - a model defined in Swagger
        """

        self._organisation = None
        self._roles = None

        if organisation is not None:
          self.organisation = organisation
        if roles is not None:
          self.roles = roles

    @property
    def organisation(self):
        """
        Gets the organisation of this InvitationEmbedded.
        The organisation the user has been invited to.

        :return: The organisation of this InvitationEmbedded.
        :rtype: Organisation
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """
        Sets the organisation of this InvitationEmbedded.
        The organisation the user has been invited to.

        :param organisation: The organisation of this InvitationEmbedded.
        :type: Organisation
        """

        self._organisation = organisation

    @property
    def roles(self):
        """
        Gets the roles of this InvitationEmbedded.
        The roles the user will be assigned once the invitation has been accepted.

        :return: The roles of this InvitationEmbedded.
        :rtype: list[Role]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this InvitationEmbedded.
        The roles the user will be assigned once the invitation has been accepted.

        :param roles: The roles of this InvitationEmbedded.
        :type: list[Role]
        """

        self._roles = roles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InvitationEmbedded):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
