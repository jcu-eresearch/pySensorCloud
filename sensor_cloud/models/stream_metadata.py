# coding: utf-8

"""
    Sensor Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StreamMetadata(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'observed_property': 'str',
        'unit_of_measure': 'str',
        'interpolation_type': 'str',
        'cummulative': 'bool',
        'accumulation_interval': 'str',
        'accumulation_anchor': 'str',
        'timezone': 'str'
    }

    attribute_map = {
        'type': 'type',
        'observed_property': 'observedProperty',
        'unit_of_measure': 'unitOfMeasure',
        'interpolation_type': 'interpolationType',
        'cummulative': 'cummulative',
        'accumulation_interval': 'accumulationInterval',
        'accumulation_anchor': 'accumulationAnchor',
        'timezone': 'timezone'
    }

    def __init__(self, type=None, observed_property=None, unit_of_measure=None, interpolation_type=None, cummulative=None, accumulation_interval=None, accumulation_anchor=None, timezone=None):
        """
        StreamMetadata - a model defined in Swagger
        """

        self._type = None
        self._observed_property = None
        self._unit_of_measure = None
        self._interpolation_type = None
        self._cummulative = None
        self._accumulation_interval = None
        self._accumulation_anchor = None
        self._timezone = None

        self.type = type
        self.observed_property = observed_property
        self.unit_of_measure = unit_of_measure
        self.interpolation_type = interpolation_type
        if cummulative is not None:
          self.cummulative = cummulative
        if accumulation_interval is not None:
          self.accumulation_interval = accumulation_interval
        if accumulation_anchor is not None:
          self.accumulation_anchor = accumulation_anchor
        if timezone is not None:
          self.timezone = timezone

    @property
    def type(self):
        """
        Gets the type of this StreamMetadata.

        :return: The type of this StreamMetadata.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this StreamMetadata.

        :param type: The type of this StreamMetadata.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        allowed_values = [".ScalarStreamMetaData", ".GeoLocationStreamMetaData"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def observed_property(self):
        """
        Gets the observed_property of this StreamMetadata.
        (Only applicable for ScalarStreamMetaData) Use the /vocabulary API to search for an applicable term. If you can't find a suitable term then contact the SensorCloud team to get your observed property added.

        :return: The observed_property of this StreamMetadata.
        :rtype: str
        """
        return self._observed_property

    @observed_property.setter
    def observed_property(self, observed_property):
        """
        Sets the observed_property of this StreamMetadata.
        (Only applicable for ScalarStreamMetaData) Use the /vocabulary API to search for an applicable term. If you can't find a suitable term then contact the SensorCloud team to get your observed property added.

        :param observed_property: The observed_property of this StreamMetadata.
        :type: str
        """
        if observed_property is None:
            raise ValueError("Invalid value for `observed_property`, must not be `None`")

        self._observed_property = observed_property

    @property
    def unit_of_measure(self):
        """
        Gets the unit_of_measure of this StreamMetadata.
        (Only applicable for GeoLocationStreamMetaData) Use the /vocabulary API to search for an applicable term. If you can't find a suitable term then contact SensorCloud team to get your unit of measure added.

        :return: The unit_of_measure of this StreamMetadata.
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """
        Sets the unit_of_measure of this StreamMetadata.
        (Only applicable for GeoLocationStreamMetaData) Use the /vocabulary API to search for an applicable term. If you can't find a suitable term then contact SensorCloud team to get your unit of measure added.

        :param unit_of_measure: The unit_of_measure of this StreamMetadata.
        :type: str
        """
        if unit_of_measure is None:
            raise ValueError("Invalid value for `unit_of_measure`, must not be `None`")

        self._unit_of_measure = unit_of_measure

    @property
    def interpolation_type(self):
        """
        Gets the interpolation_type of this StreamMetadata.
        Only 'Continuous' and 'Discontinuous' interpolation types are valid for GeoLocationValue resulttype.

        :return: The interpolation_type of this StreamMetadata.
        :rtype: str
        """
        return self._interpolation_type

    @interpolation_type.setter
    def interpolation_type(self, interpolation_type):
        """
        Sets the interpolation_type of this StreamMetadata.
        Only 'Continuous' and 'Discontinuous' interpolation types are valid for GeoLocationValue resulttype.

        :param interpolation_type: The interpolation_type of this StreamMetadata.
        :type: str
        """
        if interpolation_type is None:
            raise ValueError("Invalid value for `interpolation_type`, must not be `None`")
        allowed_values = ["http://www.opengis.net/def/waterml/2.0/interpolationType/Continuous", "http://www.opengis.net/def/waterml/2.0/interpolationType/Discontinuous", "http://www.opengis.net/def/waterml/2.0/interpolationType/InstantTotal", "http://www.opengis.net/def/waterml/2.0/interpolationType/AveragePrec", "http://www.opengis.net/def/waterml/2.0/interpolationType/MaxPrec", "http://www.opengis.net/def/waterml/2.0/interpolationType/MinPrec", "http://www.opengis.net/def/waterml/2.0/interpolationType/TotalPrec", "http://www.opengis.net/def/waterml/2.0/interpolationType/ConstPrec", "http://www.opengis.net/def/waterml/2.0/interpolationType/AverageSucc", "http://www.opengis.net/def/waterml/2.0/interpolationType/TotalSucc", "http://www.opengis.net/def/waterml/2.0/interpolationType/MinSucc", "http://www.opengis.net/def/waterml/2.0/interpolationType/MaxSucc", "http://www.opengis.net/def/waterml/2.0/interpolationType/ConstSucc"]
        if interpolation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interpolation_type` ({0}), must be one of {1}"
                .format(interpolation_type, allowed_values)
            )

        self._interpolation_type = interpolation_type

    @property
    def cummulative(self):
        """
        Gets the cummulative of this StreamMetadata.
        (Only applicable for ScalarStreamMetaData). Does this data stream represent an accumulated total.

        :return: The cummulative of this StreamMetadata.
        :rtype: bool
        """
        return self._cummulative

    @cummulative.setter
    def cummulative(self, cummulative):
        """
        Sets the cummulative of this StreamMetadata.
        (Only applicable for ScalarStreamMetaData). Does this data stream represent an accumulated total.

        :param cummulative: The cummulative of this StreamMetadata.
        :type: bool
        """

        self._cummulative = cummulative

    @property
    def accumulation_interval(self):
        """
        Gets the accumulation_interval of this StreamMetadata.
        (Only applicable for cummulative streams). Specify the accumulation interval using ISO8601 duration format. Use the most appropriate calendar unit.

        :return: The accumulation_interval of this StreamMetadata.
        :rtype: str
        """
        return self._accumulation_interval

    @accumulation_interval.setter
    def accumulation_interval(self, accumulation_interval):
        """
        Sets the accumulation_interval of this StreamMetadata.
        (Only applicable for cummulative streams). Specify the accumulation interval using ISO8601 duration format. Use the most appropriate calendar unit.

        :param accumulation_interval: The accumulation_interval of this StreamMetadata.
        :type: str
        """

        self._accumulation_interval = accumulation_interval

    @property
    def accumulation_anchor(self):
        """
        Gets the accumulation_anchor of this StreamMetadata.
        (Only applicable for cummulative streams). Specify the accumulation anchor using ISO8601 format.

        :return: The accumulation_anchor of this StreamMetadata.
        :rtype: str
        """
        return self._accumulation_anchor

    @accumulation_anchor.setter
    def accumulation_anchor(self, accumulation_anchor):
        """
        Sets the accumulation_anchor of this StreamMetadata.
        (Only applicable for cummulative streams). Specify the accumulation anchor using ISO8601 format.

        :param accumulation_anchor: The accumulation_anchor of this StreamMetadata.
        :type: str
        """

        self._accumulation_anchor = accumulation_anchor

    @property
    def timezone(self):
        """
        Gets the timezone of this StreamMetadata.
        Timezone of data stream. Required for cummulative scalar streams.

        :return: The timezone of this StreamMetadata.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this StreamMetadata.
        Timezone of data stream. Required for cummulative scalar streams.

        :param timezone: The timezone of this StreamMetadata.
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StreamMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
