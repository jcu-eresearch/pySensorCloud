# coding: utf-8

"""
    Sensor Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SharePost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organisationid': 'str',
        'groupid': 'str',
        'collectionid': 'str',
        'description': 'str'
    }

    attribute_map = {
        'organisationid': 'organisationid',
        'groupid': 'groupid',
        'collectionid': 'collectionid',
        'description': 'description'
    }

    def __init__(self, organisationid=None, groupid=None, collectionid=None, description=None):
        """
        SharePost - a model defined in Swagger
        """

        self._organisationid = None
        self._groupid = None
        self._collectionid = None
        self._description = None

        if organisationid is not None:
          self.organisationid = organisationid
        if groupid is not None:
          self.groupid = groupid
        if collectionid is not None:
          self.collectionid = collectionid
        if description is not None:
          self.description = description

    @property
    def organisationid(self):
        """
        Gets the organisationid of this SharePost.

        :return: The organisationid of this SharePost.
        :rtype: str
        """
        return self._organisationid

    @organisationid.setter
    def organisationid(self, organisationid):
        """
        Sets the organisationid of this SharePost.

        :param organisationid: The organisationid of this SharePost.
        :type: str
        """

        self._organisationid = organisationid

    @property
    def groupid(self):
        """
        Gets the groupid of this SharePost.

        :return: The groupid of this SharePost.
        :rtype: str
        """
        return self._groupid

    @groupid.setter
    def groupid(self, groupid):
        """
        Sets the groupid of this SharePost.

        :param groupid: The groupid of this SharePost.
        :type: str
        """

        self._groupid = groupid

    @property
    def collectionid(self):
        """
        Gets the collectionid of this SharePost.

        :return: The collectionid of this SharePost.
        :rtype: str
        """
        return self._collectionid

    @collectionid.setter
    def collectionid(self, collectionid):
        """
        Sets the collectionid of this SharePost.

        :param collectionid: The collectionid of this SharePost.
        :type: str
        """

        self._collectionid = collectionid

    @property
    def description(self):
        """
        Gets the description of this SharePost.

        :return: The description of this SharePost.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SharePost.

        :param description: The description of this SharePost.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SharePost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
